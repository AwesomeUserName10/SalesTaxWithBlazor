@page "/salestax"
@using SalesTaxApp.Models
@using SalesTaxApp.Services

@inject IShoppingTripCalculator ShoppingTripCalculator
@inject IPriceCalculatorService PriceCalculatorService

<PageTitle>Sales Tax Problem</PageTitle>

<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="FirstInputCaseCalculator" Text="1st Shopping Trip" ButtonStyle="ButtonStyle.Primary" />
<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="SecondInputCaseCalculator" Text="2nd Shopping Trip" ButtonStyle="ButtonStyle.Primary" />
<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="ThirdInputCaseCalculator" Text="3rd Shopping Trip" ButtonStyle="ButtonStyle.Primary" />

<br>
<br>

@if (_currentShoppingTrip != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Price with Tax</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _currentShoppingTrip.Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.GetBasePrice()</td>
                    <td>@product.GetPriceWithTax()</td>
                </tr>
            }
        </tbody>
    </table>


    <p>Total taxes : @_currentShoppingTrip.TotalTaxesAmount</p>
    <p>Total amount : @_currentShoppingTrip.TotalAmount</p>
}



@code {
    ShoppingTrip? _currentShoppingTrip;

    #region Precalculated Input
    private void FirstInputCaseCalculator()
    {
        var listOfProducts = new List<IProduct>
        {
            new Product("Book",12.49m),
            new Product("Chocolate bar", 0.85m),
            new SalesTaxProduct(new Product("Music CD", 14.99m),PriceCalculatorService)
        };

        _currentShoppingTrip = ShoppingTripCalculator.BuildShoppingTrip(listOfProducts);
    }

    private void SecondInputCaseCalculator()
    {
        var listOfProducts = new List<IProduct>
        {
            new ImportedTaxProduct(new Product("Imported box of chocolates",10.00m),PriceCalculatorService),
            new ImportedTaxProduct(new SalesTaxProduct(new Product("Imported bottle of perfume",  47.50m),PriceCalculatorService),PriceCalculatorService),
        };
        _currentShoppingTrip = ShoppingTripCalculator.BuildShoppingTrip(listOfProducts);
    }

    private void ThirdInputCaseCalculator()
    {
        var listOfProducts = new List<IProduct>
        {
            new ImportedTaxProduct(new SalesTaxProduct(new Product("Imported bottle of perfume", 27.99m),PriceCalculatorService),PriceCalculatorService),
            new SalesTaxProduct(new Product("Bottle of perfume", 18.99m),PriceCalculatorService),
            new Product("Packet of paracetamol", 9.75m),
            new ImportedTaxProduct(new Product("Box of imported chocolates", 11.25m),PriceCalculatorService),
    };
        _currentShoppingTrip = ShoppingTripCalculator.BuildShoppingTrip(listOfProducts);
    }
    #endregion
}
